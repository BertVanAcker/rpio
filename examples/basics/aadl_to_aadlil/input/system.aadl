package Turtlebot_case
public
	with PhysicalArchitecture,LogicalArchitecture,messages;
	
	-- self-adaptive system model containing the managing and managed system and interconnections
	system adaptiveSystem

	end adaptiveSystem;
	
	system implementation adaptiveSystem.impl
		subcomponents
			-- software
			managedSystem: system managedSystem.impl;
			managingSystem: system managingSystem.impl;
			-- hardware
			platform: system PhysicalArchitecture::turtlebot.impl1;
		connections
			c1: port managedSystem.weatherConditions -> managingSystem.weatherConditions;
			c2: port managedSystem.shipPose -> managingSystem.shipPose;
			c3: port managedSystem.shipAction -> managingSystem.shipAction;
			
			c4: port managingSystem.predictedPath -> managedSystem.predictedPath;
		properties
			Actual_Processor_Binding => ( reference( platform.controller.MissionProcessor1) ) applies to managingSystem.m;
			Actual_Processor_Binding => ( reference( platform.controller.MissionProcessor1) ) applies to managingSystem.a;
			Actual_Processor_Binding => ( reference( platform.controller.MissionProcessor1) ) applies to managingSystem.p;
			Actual_Processor_Binding => ( reference( platform.controller.MissionProcessor1) ) applies to managingSystem.l;
			Actual_Processor_Binding => ( reference( platform.controller.MissionProcessor1) ) applies to managingSystem.e;
			Actual_Processor_Binding => ( reference( platform.controller.MissionProcessor1) ) applies to managingSystem.k;
			
			Actual_Processor_Binding => ( reference( platform.robot.RPI) ) applies to managedSystem.controlSoftware;
			
	end adaptiveSystem.impl;

	-- managed system part
	system managedSystem

		features
			weatherConditions: out event data port messages::weatherConditions;
			shipPose: out event data port messages::shipPose;
			shipAction: out event data port messages::shipAction;

			predictedPath: in event data port messages::predictedPath;

	end managedSystem;
	
	system implementation managedSystem.impl
		subcomponents
			controlSoftware: process LogicalArchitecture::controlSoftware.impl;
	
	
	end managedSystem.impl;
	
	
	
	-- managing system part
	system managingSystem

		features
			weatherConditions: in event data port messages::weatherConditions;
			shipPose: in event data port messages::shipPose;
			shipAction: in event data port messages::shipAction;

			predictedPath: out event data port messages::predictedPath;

	end managingSystem;
	
	system implementation managingSystem.impl
		subcomponents
			m: process LogicalArchitecture::monitor.impl;
			a: process LogicalArchitecture::analysis.impl;
			p: process LogicalArchitecture::plan.impl;
			l: process LogicalArchitecture::legitimate.impl;
			e: process LogicalArchitecture::execute.impl;
			k: process LogicalArchitecture::knowledge;
			
		connections
			-- managed system to knowledge
			K1: port shipPose -> k.shipPose;
			K2: port weatherConditions -> k.weatherConditions;
			K3: port shipAction -> k.shipAction;
			
			-- monitor links
			M1: port k.shipPose -> m.shipPose;
			M2: port k.weatherConditions -> m.weatherConditions;
			M3: port k.shipAction -> m.shipAction;
			M4: port m.pathEstimate -> k.pathEstimate;
			
			-- analysis links
			A1: port k.pathEstimate -> a.pathEstimate;
			A2: port a.pathAnomaly -> k.pathAnomaly;
			
			-- plan links
			--todo: what does the plan-phase use as input?
			P1: port p.plan -> k.plan;
			
			-- legitimate links
			L1: port k.plan -> l.plan;
			L2: port l.isLegit -> k.isLegit;
			
			-- execute links
			E1: port k.plan -> e.plan;
			E2: port k.isLegit -> e.isLegit;
			E3: port e.pathEstimate -> k.pathEstimate;
			
			-- knowledge to managed system
			K4: port k.pathEstimate -> predictedPath;
					
	end managingSystem.impl;
	
end Turtlebot_case;
