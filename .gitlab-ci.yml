image: docker:27.3.1-dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  # Where to publish this build's tagged working container.
  DOCKER_SHA: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  DOCKER_BRANCH: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  DOCKER_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  DOCKER_LATEST: $CI_REGISTRY_IMAGE:latest

stages:
  - test
  - build
  - release
  - publish

test-wiki:
  stage: test
  image: python:3.12
  script:
    - pip install .
    - pip install -r requirements.txt
    - pip install -U sphinx
    - sphinx-build -b html ./docs public

.pyinstaller-build:
  stage: build
  tags:
    - windows  # Ensure the runner is tagged for windoze
  image: python:3.12-windowsservercore-ltsc2022
  script:
    - pip install pyinstaller
    - pyinstaller --onefile --name "rpio" rpio.spec
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
      allow_failure: true

upload:
  stage: release
  image: python:3.12
  script:
    - pip install build twine flit
    - FLIT_INDEX_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi flit build
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  rules:
    - if: $CI_COMMIT_TAG

.upload-pypi:
  stage: release
  image: python:3.12
  script:
    - pip install build twine flit
    - flit build
    - python -m twine upload dist/*
  dependencies:
    - upload
  rules:
    - if: $CI_COMMIT_TAG

.upload-binaries:
  stage: release
  image: python:3.12
  script:
    - echo "Uploading binaries to release"
  dependencies:
    - pyinstaller-build
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
      allow_failure: true

build-docker:
  stage: build
  script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk update && apk add git
    - docker pull $DOCKER_BRANCH || true
    - docker build --cache-from $DOCKER_BRANCH -f ./Dockerfile --tag $DOCKER_BRANCH .
    - docker push $DOCKER_BRANCH
  rules:
    - if: $CI_COMMIT_TAG || $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "dev"
      when: manual
      allow_failure: true

build-tagged-docker:
  stage: build
  script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk update && apk add git
    - docker pull $DOCKER_BRANCH || true
    - docker tag $DOCKER_BRANCH $DOCKER_LATEST
    - docker push $DOCKER_LATEST
    - docker tag $DOCKER_BRANCH $DOCKER_TAG
    - docker push $DOCKER_TAG
  rules:
    - if: $CI_COMMIT_TAG

pages:
  stage: publish
  image: python:3.12
  script:
    - pip install .
    - pip install -r requirements.txt
    - pip install -U sphinx
    - sphinx-build -b html ./docs public
  dependencies:
    - test-wiki
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
      allow_failure: true
